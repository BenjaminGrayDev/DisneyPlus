(function (React) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    console.log("ðŸ”¥ Custom Dashboard Component Loaded! ðŸ”¥");
    const CustomDashboard = () => {
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: styles$1.container
      }, /*#__PURE__*/React__default.default.createElement("header", {
        style: styles$1.header
      }, /*#__PURE__*/React__default.default.createElement("h1", {
        style: styles$1.headerTitle
      }, "\uD83D\uDE80 Welcome to Disney Plus Admin Panel"), /*#__PURE__*/React__default.default.createElement("p", {
        style: styles$1.subtitle
      }, "Manage your system efficiently with ease.")));
    };
    const styles$1 = {
      container: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        background: "linear-gradient(to bottom, #f3f4f6, #e3e8ff, #e0d3ff)" // âœ… Soft background gradient
      },
      header: {
        textAlign: "center",
        background: "linear-gradient(to right, #1e3c72, #2a5298)",
        // âœ… Elegant header gradient
        padding: "30px",
        borderRadius: "12px",
        color: "white",
        boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
        maxWidth: "600px"
      },
      headerTitle: {
        margin: "0",
        fontSize: "26px",
        fontWeight: "bold"
      },
      subtitle: {
        marginTop: "10px",
        fontSize: "18px",
        opacity: "0.9"
      }
    };

    const CustomLogin = () => {
      const [email, setEmail] = React.useState("");
      const [password, setPassword] = React.useState("");
      const [error, setError] = React.useState("");
      const [loading, setLoading] = React.useState(false);
      const handleSubmit = async e => {
        e.preventDefault();
        setError("");
        setLoading(true);
        try {
          const response = await fetch("/admin/login", {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              email,
              password
            })
          });
          if (response.ok) {
            window.location.href = "/admin";
          } else {
            const data = await response.json();
            setError(data.message || "Invalid email or password");
          }
        } catch (err) {
          setError("Login failed. Please try again.");
        } finally {
          setLoading(false);
        }
      };
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.container
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: styles.loginBox
      }, /*#__PURE__*/React__default.default.createElement("h2", {
        style: styles.title
      }, /*#__PURE__*/React__default.default.createElement("span", {
        role: "img",
        "aria-label": "lock"
      }, "\uD83D\uDD12"), "Disney Plus Admin Login"), error && /*#__PURE__*/React__default.default.createElement("p", {
        style: styles.errorMessage
      }, error), /*#__PURE__*/React__default.default.createElement("form", {
        onSubmit: handleSubmit,
        style: styles.form
      }, /*#__PURE__*/React__default.default.createElement("input", {
        type: "email",
        placeholder: "Email",
        value: email,
        onChange: e => setEmail(e.target.value),
        required: true,
        style: styles.input
      }), /*#__PURE__*/React__default.default.createElement("input", {
        type: "password",
        placeholder: "Password",
        value: password,
        onChange: e => setPassword(e.target.value),
        required: true,
        style: styles.input
      }), /*#__PURE__*/React__default.default.createElement("button", {
        type: "submit",
        style: {
          ...styles.button,
          ...(loading ? styles.disabledButton : {})
        },
        disabled: loading
      }, loading ? "Logging in..." : "Login"))));
    };
    const styles = {
      container: {
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "100vh",
        background: "linear-gradient(to top, #0c3483 0%, #a2b6df 100%, #6b8cce 100%, #a2b6df 100%)"
      },
      loginBox: {
        background: "rgba(255, 255, 255, 0.2)",
        backdropFilter: "blur(15px)",
        padding: "30px",
        borderRadius: "12px",
        boxShadow: "0 4px 15px rgba(0, 0, 0, 0.2)",
        textAlign: "center",
        width: "380px",
        // âœ… Wider container for better spacing
        border: "1px solid rgba(255, 255, 255, 0.3)",
        color: "white",
        transition: "all 0.3s ease-in-out"
      },
      title: {
        marginBottom: "20px",
        fontSize: "22px",
        fontWeight: "bold",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        gap: "5px"
      },
      form: {
        display: "flex",
        flexDirection: "column",
        alignItems: "center" // âœ… Center everything
      },
      input: {
        width: "100%",
        // âœ… Ensures full width inside form
        maxWidth: "320px",
        // âœ… Makes sure it doesn't exceed container width
        padding: "12px",
        marginBottom: "12px",
        borderRadius: "8px",
        border: "1px solid rgba(255, 255, 255, 0.3)",
        background: "rgba(255, 255, 255, 0.2)",
        color: "white",
        fontSize: "16px",
        outline: "none",
        transition: "all 0.3s ease-in-out"
      },
      button: {
        width: "100%",
        // âœ… Matches input width
        maxWidth: "350px",
        // âœ… Same as inputs
        padding: "12px",
        border: "none",
        borderRadius: "8px",
        fontSize: "16px",
        fontWeight: "bold",
        cursor: "pointer",
        background: "linear-gradient(to right, #ff7b00, #ff5c00)",
        color: "white",
        transition: "transform 0.2s, background 0.3s"
      },
      disabledButton: {
        background: "#666",
        cursor: "not-allowed"
      },
      errorMessage: {
        color: "#ff4444",
        fontSize: "14px",
        marginBottom: "12px"
      }
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.Dashboard = CustomDashboard;
    AdminJS.UserComponents.Login = CustomLogin;

})(React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
